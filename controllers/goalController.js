const mongoose = require("mongoose");
const Goal = require("../models/Goal");

// üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á Goal (‡πÉ‡∏ä‡πâ session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö web)
exports.createGoal = async (req, res) => {
  const { title, targetAmount, dueDate, duration, durationType } = req.body;
  const userId = req.session.userId; // ‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å session ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏ß‡πâ

  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  if (!userId) {
    return res.status(401).json({ message: "Unauthorized" });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ duration ‡πÅ‡∏•‡∏∞ durationType ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!duration || !durationType) {
    return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ duration ‡πÅ‡∏•‡∏∞ durationType" });
  }

  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á goal ‡πÉ‡∏´‡∏°‡πà
    const newGoal = new Goal({
      title,
      targetAmount,
      currentAmount: 0,
      dueDate,
      user: userId, // ‡∏ú‡∏π‡∏Å goal ‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ö user ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
      duration,
      durationType,
    });

    await newGoal.save(); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    res.status(201).json(newGoal); // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö goal ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
  } catch (err) {
    console.error("createGoal error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Goal", error: err.message });
  }
};

// üîπ ‡∏î‡∏∂‡∏á Goals ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà (web ‡πÉ‡∏ä‡πâ session)
exports.getGoals = async (req, res) => {
  const userId = req.session.userId;

  if (!userId) {
    return res.status(401).json({ message: "Unauthorized" });
  }

  try {
    const goals = await Goal.find({ user: userId }); // ‡∏î‡∏∂‡∏á goal ‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ
    res.status(200).json(goals);
  } catch (err) {
    console.error("getGoals error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á Goal", error: err.message });
  }
};

// üîπ ‡∏î‡∏∂‡∏á Goals ‡πÇ‡∏î‡∏¢ userId (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Flutter ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ session)
exports.getGoalsByUserId = async (req, res) => {
  const userId = req.params.userId;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ userId ‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!mongoose.Types.ObjectId.isValid(userId)) {
    return res.status(400).json({ message: "userId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  try {
    const goals = await Goal.find({ user: userId });
    res.status(200).json(goals);
  } catch (err) {
    console.error("getGoalsByUserId error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á Goal", error: err.message });
  }
};

// üîπ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
exports.getGoalProgress = async (req, res) => {
  const goalId = req.params.id;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ goalId ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!mongoose.Types.ObjectId.isValid(goalId)) {
    return res.status(400).json({ message: "Goal ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  try {
    const goal = await Goal.findById(goalId);
    if (!goal) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏µ‡πâ" });
    }

    if (goal.targetAmount === 0) {
      return res.status(400).json({ message: "Target Amount cannot be 0" });
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    const progress = (goal.currentAmount / goal.targetAmount) * 100;

    const now = new Date();
    let remainingTime = 0;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó duration
    if (goal.durationType === "days") {
      remainingTime = Math.ceil((new Date(goal.dueDate) - now) / (1000 * 3600 * 24));
    } else if (goal.durationType === "months") {
      remainingTime = Math.ceil((new Date(goal.dueDate) - now) / (1000 * 3600 * 24 * 30));
    }

    res.status(200).json({
      goal,
      progress: progress.toFixed(2), // ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      remainingTime,
    });
  } catch (err) {
    console.error("getGoalProgress error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤", error: err.message });
  }
};

// üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Goal
exports.updateGoal = async (req, res) => {
  const goalId = req.params.id;
  const userId = req.session.userId;

  if (!userId) {
    return res.status(401).json({ message: "Unauthorized" });
  }

  if (!mongoose.Types.ObjectId.isValid(goalId)) {
    return res.status(400).json({ message: "Goal ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  try {
    const goal = await Goal.findById(goalId);
    if (!goal) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏µ‡πâ" });
    }

    // ‡∏´‡πâ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï goal ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    if (goal.user.toString() !== userId) {
      return res.status(403).json({ message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ" });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤
    ['title','targetAmount','currentAmount','dueDate','duration','durationType'].forEach(field => {
      if (req.body[field] != null) goal[field] = req.body[field];
    });

    await goal.save(); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    res.status(200).json(goal);
  } catch (err) {
    console.error("updateGoal error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Goal", error: err.message });
  }
};

// üîπ ‡∏•‡∏ö Goal
exports.deleteGoal = async (req, res) => {
  const goalId = req.params.id;
  const userId = req.session.userId;

  if (!userId) {
    return res.status(401).json({ message: "Unauthorized" });
  }

  if (!mongoose.Types.ObjectId.isValid(goalId)) {
    return res.status(400).json({ message: "Goal ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  try {
    const goal = await Goal.findById(goalId);
    if (!goal) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏µ‡πâ" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ goal ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á user ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (goal.user.toString() !== userId) {
      return res.status(403).json({ message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ" });
    }

    await Goal.findByIdAndDelete(goalId); // ‡∏•‡∏ö goal
    res.status(200).json({ message: "‡∏•‡∏ö Goal ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("deleteGoal error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Goal", error: err.message });
  }
};

// üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á Goal ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ userId ‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Flutter ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ session)
exports.createGoalByUserId = async (req, res) => {
  const { title, targetAmount, dueDate, duration, durationType } = req.body;
  const userId = req.params.userId;

  if (!mongoose.Types.ObjectId.isValid(userId)) {
    return res.status(400).json({ message: "userId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  if (!duration || !durationType) {
    return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ duration ‡πÅ‡∏•‡∏∞ durationType" });
  }

  try {
    const newGoal = new Goal({
      title,
      targetAmount,
      currentAmount: 0,
      dueDate,
      user: userId, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î user ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å param
      duration,
      durationType,
    });

    await newGoal.save();
    res.status(201).json(newGoal);
  } catch (err) {
    console.error("createGoalByUserId error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Goal", error: err.message });
  }
};
