const Transaction = require("../models/Transaction");
const Goal = require("../models/Goal");
const mongoose = require("mongoose");
const calculateProgress = require("../utils/calculateProgress");

// üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° (‡∏ù‡∏≤‡∏Å/‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô)
const addTransaction = async (req, res) => {
  try {
    console.log("üì• POST /api/transactions ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß");
    console.log("‚û°Ô∏è req.body:", req.body);

    let { amount, goalId, transactionType, userId } = req.body;
    amount = parseFloat(amount); // ‡πÅ‡∏õ‡∏•‡∏á amount ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (amount == null || !goalId || !transactionType || !userId) {
      return res.status(400).json({ message: "‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ amount, goalId, transactionType ‡πÅ‡∏•‡∏∞ userId" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ amount ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    if (isNaN(amount) || amount <= 0) {
      return res.status(400).json({ message: "‚ùó ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ö‡∏ß‡∏Å (amount > 0)" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö transactionType ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô deposit ‡∏´‡∏£‡∏∑‡∏≠ withdraw ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (!["deposit", "withdraw"].includes(transactionType)) {
      return res.status(400).json({ message: "‚ùó ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô deposit ‡∏´‡∏£‡∏∑‡∏≠ withdraw ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ goalId ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!mongoose.Types.ObjectId.isValid(goalId)) {
      return res.status(400).json({ message: "‚ùó Goal ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á Goal ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const goal = await Goal.findById(goalId);
    if (!goal) {
      return res.status(404).json({ message: "‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö Goal ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏" });
    }

    // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
    if (transactionType === "withdraw" && goal.currentAmount < amount) {
      return res.status(400).json({ message: "‚ùó ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô" });
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà
    const newTransaction = new Transaction({
      amount,
      type: transactionType,
      goal: goal._id,
      user: userId,
    });

    await newTransaction.save(); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô Goal
    if (transactionType === "deposit") {
      goal.currentAmount += amount;
    } else {
      goal.currentAmount -= amount;
    }

    await goal.save(); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Goal ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß

    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    const progress = calculateProgress(goal.targetAmount, goal.currentAmount);

    // ‚úÖ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
    return res.status(201).json({
      message: "‚úÖ ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      progress: progress.toFixed(2),
    });
  } 
    catch (error) {
    console.error("‚ùå Error during transaction:", error);
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°", error: error.message });
  }
};

// üîπ ‡∏î‡∏∂‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á Goal
const getTransactions = async (req, res) => {
  try {
    const { goalId } = req.params;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö goalId
    if (!mongoose.Types.ObjectId.isValid(goalId)) {
      return res.status(400).json({ message: "Goal ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î -> ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î
    const transactions = await Transaction
      .find({ goal: goalId })
      .sort({ date: -1 })
      .populate("user", "username"); // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ username

    // ‚úÖ ‡∏î‡∏∂‡∏á Goal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const goal = await Goal.findById(goalId);
    if (!goal) {
      return res.status(404).json({ message: "‚ùó Goal ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏°‡πà‡∏û‡∏ö" });
    }

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á
    const simplified = transactions.map(tx => {
      if (tx.type === "withdraw" && goal.currentAmount < tx.amount) {
        return null; // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≠‡∏î
      }
      return {
        _id: tx._id.toString(),
        goal: tx.goal.toString(),
        user: tx.user?._id?.toString() || "",
        amount: tx.amount,
        type: tx.type,
        durationType: tx.durationType || "",
        duration: tx.duration || 0,
        date: tx.date,
      };
    }).filter(tx => tx !== null); // ‡∏•‡∏ö null ‡∏≠‡∏≠‡∏Å

    // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
    return res.status(200).json({ transactions: simplified });
  } catch (error) {
    console.error("‚ùå Error fetching transactions:", error);
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°", error: error.message });
  }
};

module.exports = { addTransaction, getTransactions };
